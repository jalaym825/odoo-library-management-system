// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  LIBRARIAN
}

model Users {
  sys_id        String  @id @default(cuid())
  email         String  @unique
  password      String
  role          Role    @default(USER)
  name          String
  isPasswordSet Boolean
  isVerified    Boolean @default(false)
  avatar        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verificationToken VerificationTokens? @relation("verificationToken")
}

model VerificationTokens {
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      Users    @relation("verificationToken", fields: [userId], references: [sys_id])
}

model Books {
  sys_id    String @id @default(cuid())
  isbn      String @unique
  title     String
  publisher String @default("")
  quantity  Int
  current_quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Categories[] @relation("CategoryBooks")
  authors    Authors[]    @relation("AuthorBooks")
}

model Categories {
  sys_id String @id @default(cuid())
  name   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Books[] @relation("CategoryBooks")
}

model Authors {
  sys_id String @id @default(cuid())
  name   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Books[] @relation("AuthorBooks")
}
